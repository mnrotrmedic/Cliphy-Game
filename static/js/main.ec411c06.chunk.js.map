{"version":3,"sources":["utils/API.js","components/Card.js","components/Wrapper/index.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["offset","parseInt","Math","floor","random","API","search","query","axios","get","CardComponent","props","react_default","a","createElement","Card_default","style","width","height","position","float","backgroundColor","border","onClick","buttonLogic","id","Img","src","image","alt","name","clicked","Wrapper","className","children","GameContainer","state","apiCards","score","highScore","pickSomethingCute","cuteAnimals","cutePick","length","_this","getGiphs","concat","console","log","then","res","data","map","card","setState","catch","err","shuffleGiphs","array","j","x","i","gameOver","newAPICards","incrementScore","toast","error","gameReset","newScore","success","this","_this2","Container_default","Navbar_default","color","Row_default","components_Wrapper","giph","components_Card","images","fixed_width","url","Component","App","react_toastify","autoClose","transition","Zoom","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec411c06.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst BASEURL = \"https://api.giphy.com/v1/gifs/search?q=\";\r\nconst APIKEY = \"&api_key=GEpLlvx43Yy5aSTYLfGZcsH4pkPInlxp&limit=10&rating=g\";\r\nconst offset = parseInt(Math.floor(Math.random() * 500));\r\n\r\nexport default {\r\n    search: function (query) {\r\n        return axios.get(BASEURL + query + APIKEY + \"&offset=\" + offset);\r\n    }\r\n}","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\"\r\n\r\nfunction CardComponent(props) {\r\n    return (\r\n        <Card\r\n            style={{\r\n                width: \"200 px\",\r\n                height: \"200 px\",\r\n                position: \"relative\",\r\n                float: \"left\",\r\n                backgroundColor: \"green\",\r\n                border: \"none\"\r\n            }}\r\n            onClick={() => props.buttonLogic(props.id)} //Click event handlet\r\n        >\r\n\r\n            <Card.Img\r\n                src={props.image}\r\n                alt={props.name}\r\n            />\r\n            {/* for testing, display ID */}\r\n            <p>{props.clicked}</p>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CardComponent;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import API from \"../utils/API\";\r\nimport CardComponent from \"./Card\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport React, { Component } from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { toast } from 'react-toastify';\r\nimport Wrapper from \"./Wrapper\"\r\n\r\n\r\nclass GameContainer extends Component {\r\n\r\n\r\n    state = {\r\n        apiCards: [], //array for giphs from API call\r\n        score: 0, //set score for page load, will be incremented for each succesful click\r\n        highScore: 0 //high score for this session, maybe add cookie or local storage for persistent score?\r\n    };\r\n\r\n    // on DOM 'mount' hit api to get cool cat giphs\r\n    componentDidMount() {\r\n        this.pickSomethingCute()\r\n    }\r\n\r\n    pickSomethingCute = () => {\r\n        const cuteAnimals = [ //array of cute li'l animals to add some variety\r\n            \"kittens\", \"puppies\", \"baby pig\", \"baby koala\"\r\n        ]\r\n        let randomNum = Math.floor(Math.random() * cuteAnimals.length);\r\n        const cutePick = cuteAnimals[randomNum];\r\n\r\n        this.getGiphs(`${cutePick}`); //call API util and look for giphs\r\n    }\r\n\r\n\r\n    // API call for giphs\r\n    getGiphs = query => {\r\n        console.log(\"getGiphs()\")\r\n        API.search(query)\r\n            .then(res => {\r\n                let data = res.data.data\r\n                //add clicked prop of false\r\n                data.map((card) => {\r\n                    card.clicked = false;\r\n                    return card;\r\n                })\r\n                this.setState({ apiCards: data })\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    // Fisher-Yates shuffle algorithm (stack overflow win)\r\n    shuffleGiphs = (array) => {\r\n        var j, x, i;\r\n        for (i = array.length - 1; i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            x = array[i];\r\n            array[i] = array[j];\r\n            array[j] = x;\r\n        }\r\n        return array; //rewrite DOM with new array\r\n    }\r\n\r\n    buttonLogic = id => {\r\n        //if clicked and value is false then set new state (& call add to score function)\r\n        //if value is true run a reset function\r\n        let gameOver = false;\r\n        let newAPICards = this.state.apiCards.map(card => {\r\n            if (card.id === id) { //find the one that was clicked\r\n                if (card.clicked) { //if clicked = true\r\n                    gameOver = true;\r\n                } else {\r\n                    card.clicked = true;\r\n                }\r\n            }\r\n            return card;\r\n        })\r\n        if (gameOver === false) {\r\n            this.setState({\r\n                apiCards: this.shuffleGiphs(newAPICards)\r\n            });\r\n            this.incrementScore();\r\n        } else if (\r\n            toast.error(\"Oh no, you already clicked that one!\"),\r\n            this.gameReset()\r\n        );\r\n    }\r\n\r\n    incrementScore = () => {\r\n        let newScore = this.state.score + 1;\r\n        console.log(`Score: ${newScore}`)\r\n        console.log(`High Score: ${this.state.highScore}`)\r\n        this.setState({ score: newScore }) //set state of score equal to value plus one\r\n        if (this.state.highScore <= newScore) { //if new score beats high score, replace high score\r\n            this.setState({\r\n                highScore: newScore\r\n            })\r\n        };\r\n\r\n        if (newScore === 10) {\r\n            toast.success(\"Perfect score! Nice work!\")\r\n            this.gameReset();\r\n        }\r\n    }\r\n\r\n    gameReset = () => {\r\n        this.setState({\r\n            score: 0, //set score for page load, will be incremented for each succesful click\r\n            highScore: this.state.highScore //high score for this session, maybe add cookie or local storage for persistent high score?\r\n        });\r\n        this.pickSomethingCute();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container\r\n                style={{ backgroundColor: \"green\" }}>\r\n                <Navbar\r\n                    style={{\r\n                        color: \"#ed5429\",\r\n                        width: \"100%\"\r\n                    }}\r\n                >\r\n                    <h1>Cliphy Game</h1>\r\n                    <h2>Score: {this.state.score}</h2>\r\n                    <h2>High Score: {this.state.highScore}</h2>\r\n                </Navbar>\r\n                <Row>\r\n                    <Wrapper>\r\n                        {console.log(this.state.apiCards)}\r\n                        {this.state.apiCards.map(giph => (\r\n                            <CardComponent\r\n                                buttonLogic={() => { this.buttonLogic(giph.id) }}\r\n                                id={giph.id}\r\n                                image={giph.images.fixed_width.url}\r\n                                clicked={giph.clicked}\r\n                            />\r\n                        ))}\r\n                    </Wrapper>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameContainer","import React from 'react';\nimport './App.css';\nimport GameContainer from './components/GameContainer';\nimport { ToastContainer, Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <div>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={1500}\n        transition={Zoom}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnVisibilityChange\n        draggable={false}\n        pauseOnHover\n      />\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}